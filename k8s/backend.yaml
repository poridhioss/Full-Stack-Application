apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: user-management
data:
  NODE_ENV: "production"
  DATABASE_HOST: "postgres-service"
  DATABASE_USER: "postgres"
  DATABASE_NAME: "user_management"
  DATABASE_PORT: "5432"
  PORT: "5000"
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: user-management
type: Opaque
data:
  DATABASE_PASSWORD: cG9zdGdyZXMxMjM=  # base64 encoded 'postgres123'
  JWT_SECRET: and0X3NlY3JldF9rZXk=      # base64 encoded 'jwt_secret_key'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: user-management
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: konami98/user-management-backend:latest
        ports:
        - containerPort: 5000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: NODE_ENV
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DATABASE_HOST
        - name: DATABASE_USER
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DATABASE_USER
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DATABASE_NAME
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DATABASE_PORT
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: PORT
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: DATABASE_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: JWT_SECRET
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c']
        args:
        - |
          until pg_isready -h postgres-service -p 5432 -U postgres; do
            echo "Waiting for postgres to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: user-management
  labels:
    app: backend
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
  selector:
    app: backend

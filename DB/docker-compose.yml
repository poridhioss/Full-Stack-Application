version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: user_management_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app_network
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api

  # Backend API Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: user_management_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres  # Connect to PostgreSQL container
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres123
      DATABASE_NAME: user_management
      DATABASE_PORT: 5432
      JWT_SECRET: your_jwt_secret_key_here_change_in_production
      PORT: 5000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: user_management_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: user_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user_management"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: user_management_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_logs:
    driver: local

networks:
  app_network:
    driver: bridge
